/*
 * Copyright 2024 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.gematik.test.core.expectations.verifier;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.*;

import de.gematik.bbriccs.utils.PrivateConstructorsUtil;
import de.gematik.bbriccs.utils.ResourceLoader;
import de.gematik.test.core.expectations.requirements.CoverageReporter;
import de.gematik.test.core.expectations.requirements.ErpAfos;
import de.gematik.test.erezept.fhir.resources.erp.ErxReceipt;
import de.gematik.test.erezept.fhir.testutil.ParsingTest;
import java.util.Base64;
import lombok.val;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ReceiptBundleVerifierTest extends ParsingTest {

  private static final String NEW_RECEIPT_VERSION =
      "fhir/valid/erp/1.2.0/receiptbundle/NeueVersion_0e0f861-0000-0000-0003-000000000000.xml";
  private static final String INVALID_RECEIPT_BUNDLE =
      "fhir/invalid/erp/1.2.0/receiptbundle/org_fd_response_manipulatedreferencesfullurl.xml";

  @BeforeEach
  void init() {
    CoverageReporter.getInstance().startTestcase("not needed");
  }

  @Test
  void shouldNotInstantiateUtilityClass() {
    assertTrue(PrivateConstructorsUtil.isUtilityConstructor(ReceiptBundleVerifier.class));
  }

  @Test
  void shouldPassOnValidReceipt() {
    val bundle =
        parser.decode(ErxReceipt.class, ResourceLoader.readFileFromResource(NEW_RECEIPT_VERSION));
    val step = ReceiptBundleVerifier.entryFullUrlIsUuid();
    step.apply(bundle);
  }

  @Test
  void shouldFailOnInvalidReceiptEntryFullUrl() {
    val invalidReceipt =
        parser.decode(
            ErxReceipt.class, ResourceLoader.readFileFromResource(INVALID_RECEIPT_BUNDLE));

    val step = ReceiptBundleVerifier.entryFullUrlIsUuid();
    assertThrows(AssertionError.class, () -> step.apply(invalidReceipt));
  }

  @Test
  void shouldFailOnInvalidReceiptEntryCompAuthorReference() {
    val bundle =
        parser.decode(
            ErxReceipt.class, ResourceLoader.readFileFromResource(INVALID_RECEIPT_BUNDLE));
    bundle.getAuthor().setReference("123Test");
    val step = ReceiptBundleVerifier.compAuthorRefIsUuid();
    assertThrows(AssertionError.class, () -> step.apply(bundle));
  }

  @Test
  void shouldFailOnInvalidReceiptEntrySignatureRef() {
    val bundle =
        parser.decode(
            ErxReceipt.class, ResourceLoader.readFileFromResource(INVALID_RECEIPT_BUNDLE));
    bundle.getSignature().getWho().setReference("123Test");
    val step = ReceiptBundleVerifier.signatureRefIsUuid();
    assertThrows(AssertionError.class, () -> step.apply(bundle));
  }

  @Test
  void shouldFailOnInvalidReceiptEntryCompSectionRef() {
    val bundle =
        parser.decode(
            ErxReceipt.class, ResourceLoader.readFileFromResource(INVALID_RECEIPT_BUNDLE));

    bundle.getQesDigestRefInComposSect().getEntryFirstRep().setReference("123Test");
    val step = ReceiptBundleVerifier.compSectionRefIsUuid();

    assertThrows(AssertionError.class, () -> step.apply(bundle));
  }

  @Test
  void referenceValidationShouldPassOnValidReceipt() {
    val bundle =
        parser.decode(ErxReceipt.class, ResourceLoader.readFileFromResource(NEW_RECEIPT_VERSION));

    val step = ReceiptBundleVerifier.compAuthorRefIsUuid();
    step.apply(bundle);
    val step2 = ReceiptBundleVerifier.compSectionRefIsUuid();
    step2.apply(bundle);
    val step3 = ReceiptBundleVerifier.signatureRefIsUuid();
    step3.apply(bundle);
  }

  @Test
  void shouldGetBinary() {
    val bundle =
        parser.decode(
            ErxReceipt.class,
            ResourceLoader.readFileFromResource(
                "fhir/invalid/erp/1.2.0/receiptbundle/org_fd_response_manipulatedreferencesfullurl.xml"));
    val binary = bundle.getQesDigestBinary();
    val code = binary.getContentElement().getValueAsString();
    assertEquals("Z+1XGxG6ClhoOqTLk8aU3yWiSSWfMUMubtLA3EAxV4E=", code);
  }

  private static final String SIGNED_DOC_AS_BASE64 =
      "";
  private static final String EXPECTED_HASH_FROM_MESSAGE_DIGEST =
      "eNMcZvslUsx75vwaQd4McWdHcfjHELsX/y02wsbRjlo=";

  @Test
  void shouldCompareSignature() {
    val erxReceipt =
        parser.decode(
            ErxReceipt.class,
            ResourceLoader.readFileFromResource(
                "fhir/valid/erp/1.2.0/receiptbundle/org_fd_response.xml"));
    val step =
        ReceiptBundleVerifier.compareSignatureHashWith(
            Base64.getDecoder().decode(SIGNED_DOC_AS_BASE64), ErpAfos.A_19233);
    step.apply(erxReceipt);
  }

  @Test
  void shouldFailAtCompareSignature() {
    val erxReceipt =
        parser.decode(
            ErxReceipt.class,
            ResourceLoader.readFileFromResource(
                "fhir/valid/erp/1.2.0/receiptbundle/NeueVersion_0e0f861-0000-0000-0003-000000000000.xml"));
    val step =
        ReceiptBundleVerifier.compareSignatureHashWith(
            Base64.getDecoder().decode(SIGNED_DOC_AS_BASE64), ErpAfos.A_19233);
    assertThrows(AssertionError.class, () -> step.apply(erxReceipt));
  }

  @Test
  void shouldGetHashFromSignedDoc() {
    val hash = ReceiptBundleVerifier.getHashAsBase64String(SIGNED_DOC_AS_BASE64);
    assertEquals(EXPECTED_HASH_FROM_MESSAGE_DIGEST, hash);
  }

  @Test
  void shouldFailToGetHashFromSignedDoc() {
    val hash = ReceiptBundleVerifier.getHashAsBase64String(SIGNED_DOC_AS_BASE64);
    assertNotEquals(EXPECTED_HASH_FROM_MESSAGE_DIGEST + "=", hash);
  }

  @Test
  void hashShouldNotBeEmpty() {
    val hash = ReceiptBundleVerifier.getHashAsBase64String(SIGNED_DOC_AS_BASE64);
    assertFalse(hash.isEmpty());
  }

  @Test
  void shouldThrowException() {
    assertThrows(
        IllegalArgumentException.class,
        () -> {
          val hash = ReceiptBundleVerifier.getHashAsBase64String(SIGNED_DOC_AS_BASE64 + "123");
        });
  }
}
