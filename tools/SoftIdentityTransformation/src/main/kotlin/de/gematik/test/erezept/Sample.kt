/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.gematik.test.erezept

import de.gematik.test.erezept.crypto.certificate.X509CertificateWrapper
import java.io.ByteArrayInputStream
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate


fun main(args: Array<String>) {
  val input =
decodeHex()
  val certFactory: CertificateFactory = CertificateFactory.getInstance("X.509")
  val cert: X509Certificate =
    certFactory.generateCertificate(ByteArrayInputStream(input)) as X509Certificate
  val cert1 = X509CertificateWrapper(cert)
  println()
}

private fun String.decodeHex(): ByteArray {
  check(length % 2 == 0) { "Must have an even length" }

  return chunked(2)
    .map { it.toInt(16).toByte() }
    .toByteArray()
}